#!/bin/bash

##### wgconf : gest serveur et clients wireguard
##### https://github.com/mikmer62/wgconf

##### Version 1.3

#####
##### Lecture / écriture des paramètres
#####

function wggetparams () {
  WG_DIR=/etc/wireguard
  WG_DIRKEYS=$WG_DIR/keys
  WG_DIRCONF=$WG_DIR/conf
  WG_DIRQRCODE=$WG_DIR/qrcode
  WG_PARAMS=$WG_DIR/wgconf.params
  WG_FILECONF=$WG_DIR/wg0.conf

  if [ ! -e $WG_PARAMS ]
  then
    WG_PUBLICIP=`host myip.opendns.com resolver1.opendns.com | grep 'myip.opendns.com has address' | sed -rn "s/myip.opendns.com has address (.*)/\\1/p"`
    WG_INTERNALVPNIP=10.66.66.1
    WG_LISTENPORT=51820
    WG_ETHERNET=`ip -4 route ls | grep default | sed -rn "s/.*dev ([[:alnum:]]*) .*/\\1/p"`
    WG_DNS=176.103.130.130,176.103.130.131
    WG_MTU=`ip address | grep -Po $WG_ETHERNET'.*mtu [[:digit:]]*' | sed -rn "s/.*mtu ([[:digit:]])/\\1/p"`
    WG_PERSKEEPALIVE=25
  else
    WG_PUBLICIP=`grep 'WG_PUBLICIP=' $WG_DIR'/wgconf.params' | sed -rn 's/WG_PUBLICIP=(.*)/\\1/p'`
    WG_INTERNALVPNIP=`grep 'WG_INTERNALVPNIP=' $WG_DIR'/wgconf.params' | sed -rn "s/WG_INTERNALVPNIP=(.*)/\\1/p"`
    WG_LISTENPORT=`grep 'WG_LISTENPORT=' $WG_DIR'/wgconf.params' | sed -rn "s/WG_LISTENPORT=(.*)/\\1/p"`
    WG_ETHERNET=`grep 'WG_ETHERNET=' $WG_DIR'/wgconf.params' | sed -rn "s/WG_ETHERNET=(.*)/\\1/p"`
    WG_DNS=`grep 'WG_DNS=' $WG_DIR'/wgconf.params' | sed -rn "s/WG_DNS=(.*)/\\1/p"`
    WG_MTU=`grep 'WG_MTU=' $WG_DIR'/wgconf.params' | sed -rn "s/WG_MTU=(.*)/\\1/p"`
    WG_PERSKEEPALIVE=`grep 'WG_PERSKEEPALIVE=' $WG_DIR'/wgconf.params' | sed -rn "s/WG_PERSKEEPALIVE=(.*)/\\1/p"`
  fi

  # Racine IP du VPN (XXX.XXX.XXX.)
  WG_IPROOT=`sed -rn "s/([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.).*/\\1/p" <<< $WG_INTERNALVPNIP`

  # Version du script pour maj éventuelle
  WG_CURMAJORRELEASE=`grep -e '##### Version ' $WG_DIR/wgconf | sed -rn "s/##### Version ([[:digit:]])\.([[:digit:]]).*/\\1/p"`
  WG_CURMINORRELEASE=`grep -e '##### Version ' $WG_DIR/wgconf | sed -rn "s/##### Version ([[:digit:]])\.([[:digit:]]).*/\\2/p"`
}

function wgsetparams () {
  echo "Configuration wireguard :"

  read -rp "  Adresse IP publique du serveur ? " -e -i "$WG_PUBLICIP" WG_PUBLICIP
  read -rp "  Adresse IP tunnel VPN serveur ? " -e -i "$WG_INTERNALVPNIP" WG_INTERNALVPNIP
  read -rp "  Port d'écoute wireguard du serveur ? " -e -i "$WG_LISTENPORT" WG_LISTENPORT
  read -rp "  Carte ethernet ? " -e -i "$WG_ETHERNET" WG_ETHERNET
  read -rp "  DNS ? " -e -i "$WG_DNS" WG_DNS
  read -rp "  MTU ? " -e -i "$WG_MTU" WG_MTU
  read -rp "  Persistent Keep Alive ? " -e -i "$WG_PERSKEEPALIVE" WG_PERSKEEPALIVE

  echo "# répertoire d'installation" > $WG_DIR/wgconf.params
  echo "WG_DIR="$WG_DIR >> $WG_DIR/wgconf.params
  echo "# répertoire de stockage des clés" >> $WG_DIR/wgconf.params
  echo "WG_DIRKEYS="$WG_DIRKEYS >> $WG_DIR/wgconf.params
  echo "# répertoire de stockage des fichiers de conf clients" >> $WG_DIR/wgconf.params
  echo "WG_DIRCONF="$WG_DIRCONF >> $WG_DIR/wgconf.params
  echo "# répertoire de stockage des qrcode" >> $WG_DIR/wgconf.params
  echo "WG_DIRQRCODE="$WG_DIRQRCODE >> $WG_DIR/wgconf.params
  echo "# fichier de configuration" >> $WG_DIR/wgconf.params
  echo "WG_FILECONF="$WG_FILECONF >> $WG_DIR/wgconf.params
  echo "# Adresse IP publique du serveur" >> $WG_DIR/wgconf.params
  echo "WG_PUBLICIP="$WG_PUBLICIP >> $WG_DIR/wgconf.params
  echo "# IP du serveur dans le tunnel" >> $WG_DIR/wgconf.params
  echo "WG_INTERNALVPNIP="$WG_INTERNALVPNIP >> $WG_DIR/wgconf.params
  echo "# Port d'écoute wireguard" >> $WG_DIR/wgconf.params
  echo "WG_LISTENPORT="$WG_LISTENPORT >> $WG_DIR/wgconf.params
  echo "# Carte ethernet" >> $WG_DIR/wgconf.params
  echo "WG_ETHERNET="$WG_ETHERNET >> $WG_DIR/wgconf.params
  echo "# DNS (Google=8.8.8.8,8.8.4.4; AdGuard=176.103.130.130,176.103.130.131; CloudFare=1.1.1.1,1.0.0.1; OpenDNS=208.67.222.222,208.67.220.220)" >> $WG_DIR/wgconf.params
  echo "WG_DNS="$WG_DNS >> $WG_DIR/wgconf.params
  echo "# MTU" >> $WG_DIR/wgconf.params
  echo "WG_MTU="$WG_MTU >> $WG_DIR/wgconf.params
  echo "# Persistent keep alive" >> $WG_DIR/wgconf.params
  echo "WG_PERSKEEPALIVE="$WG_PERSKEEPALIVE >> $WG_DIR/wgconf.params

  echo -e "\nFichier wgconf.params créé ou modifié !\n"
}

##### Récupération des paramètres de configuration ou par défaut
wggetparams

if [ ! -e $WG_PARAMS ]
then
  WG_OUTPUT=`wg | wc -l`
  if [ $WG_OUTPUT -ne 0 ]
  then
    # Wireguard tourne déjà mais pas avec une configuration créée par wgconf
    echo "Impossible d'utiliser wgconf avec une configuration Wireguard déjà existante !"
#    exit
  elif [ $1 != "raz" ] && [ $1 != "init" ]
  then
    # Tentative d'utilisation de wgconf sans savoir initialisé les paramètres
    echo "Tapez 'wgconf init' pour initialiser les paramètres !"
    exit
  fi
fi

#####
##### wgconf options : init / addcli / ...
#####

case $1 in
  ##### Initialisation
  init)
    if [ $# -gt 1 ]
    then
      echo "Nombre de paramètres incorrect !"
      exit
    elif [ -e $WG_PARAMS ]
    then
      echo "Les paramètres de configuration sont déjà définis !"
      exit
    fi

    wgsetparams

    ##### Création du fichier de configuration et des répertoires s'ils n'existent pas

    if [ ! -d $WG_DIRKEYS ]
    then
      mkdir $WG_DIRKEYS
      chmod 700 $WG_DIRKEYS
      chown root:root $WG_DIRKEYS
      # Création clé privée et clé publique du serveur
      wg genkey | tee $WG_DIRKEYS/wgserver_private_key | wg pubkey > $WG_DIRKEYS/wgserver_public_key
    fi

    if [ ! -d $WG_DIRCONF ]
    then
      mkdir $WG_DIRCONF
      chmod 700 $WG_DIRCONF
      chown root:root $WG_DIRCONF
    fi

    if [ ! -d $WG_DIRQRCODE ]
    then
      mkdir $WG_DIRQRCODE
      chmod 700 $WG_DIRQRCODE
      chown root:root $WG_DIRQRCODE
    fi

    if [ ! -e $WG_FILECONF ]
    then
      echo "# Server" > $WG_FILECONF
      echo "[Interface]" >> $WG_FILECONF
      echo "Address = "$WG_INTERNALVPNIP"/24" >> $WG_FILECONF
      echo "ListenPort = "$WG_LISTENPORT >> $WG_FILECONF
      echo "# Server private key" >> $WG_FILECONF
      echo "PrivateKey = "`cat $WG_DIRKEYS/wgserver_private_key` >> $WG_FILECONF
      echo "PostUp = iptables -A FORWARD -i %i -j ACCEPT;  iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o "$WG_ETHERNET" -j MASQUERADE" >> $WG_FILECONF
      echo "PostDown = iptables -D FORWARD -i %i -j ACCEPT;  iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o "$WG_ETHERNET" -j MASQUERADE" >> $WG_FILECONF
      echo "MTU = "$WG_MTU >> $WG_FILECONF
      echo "" >> $WG_FILECONF
      echo "" >> $WG_FILECONF
    fi

    ##### Redirection des IPv4 pour pouvoir atteindre le tunnel Wireguard

    sed -i -r -e 's/#{1,}?net.ipv4.ip_forward ?= ?(0|1)/net.ipv4.ip_forward = 1/g' /etc/sysctl.conf
    sysctl -p > /dev/null

    ;;

  ##### Ajout d'un client
  addcli)
    if [ $# -ne 2 ]
    then
      echo "Nom client manquant ou incorrect (le nom du client ne doit pas contenir d'espace) !"
      exit
    fi

    if [ ! -e $WG_DIRCONF/$2.conf ]
    then
      # recherche de la 1ère IP libre
      WG_NEXTIP=1
      WG_NEXTIPOK=false
      while [ $WG_NEXTIPOK == false -a $WG_NEXTIP -lt 255 ]
      do
        let WG_NEXTIP=$WG_NEXTIP+1
        WG_IPEXIST=`cat $WG_FILECONF | grep $WG_IPROOT$WG_NEXTIP"\/"`
        if [ "$WG_IPEXIST" == "" ]
        then
          WG_NEXTIPOK=true
        fi
      done
      if [ $WG_NEXTIPOK == true ]
      then
        # création clés client
        wg genkey | tee $WG_DIRKEYS/$2_private_key | wg pubkey > $WG_DIRKEYS/$2_public_key

        # création fichier configuration client
        echo "# Client "$2 > $WG_DIRCONF/$2.conf
        echo "[Interface]" >>  $WG_DIRCONF/$2.conf
        echo "# "$2" Private key peer" >>  $WG_DIRCONF/$2.conf
        echo "PrivateKey = `cat "$WG_DIR"/keys/"$2"_private_key`" >>  $WG_DIRCONF/$2.conf
        echo "Address = "$WG_IPROOT$WG_NEXTIP"/24" >>  $WG_DIRCONF/$2.conf
        echo "DNS = "$WG_DNS >>  $WG_DIRCONF/$2.conf
        echo "" >>  $WG_DIRCONF/$2.conf
        echo "[Peer]" >>  $WG_DIRCONF/$2.conf
        echo "# Server public key" >>  $WG_DIRCONF/$2.conf
        echo "PublicKey =  `cat $WG_DIRKEYS/wgserver_public_key`" >>  $WG_DIRCONF/$2.conf
        echo "Endpoint = "$WG_PUBLICIP":"$WG_LISTENPORT >>  $WG_DIRCONF/$2.conf
        echo "AllowedIPs = 0.0.0.0/0" >>  $WG_DIRCONF/$2.conf
        echo "PersistentKeepalive = "$WG_PERSKEEPALIVE >>  $WG_DIRCONF/$2.conf

        # Ajout client dans la configuration serveur
        echo "# Client "$2 >> $WG_FILECONF
        echo "[Peer]" >> $WG_FILECONF
        echo "# "$2" public key" >> $WG_FILECONF
        echo "PublicKey = "`cat $WG_DIRKEYS/$2_public_key` >> $WG_FILECONF
        echo "AllowedIPs = "$WG_IPROOT$WG_NEXTIP"/32" >> $WG_FILECONF
        echo "" >> $WG_FILECONF

        # Redémarrage serveur
        wg-quick down $WG_FILECONF >/dev/null 2>&1
        wg-quick up $WG_FILECONF >/dev/null 2>&1

        echo -e "\nAjout client "$2" réussi (IP="$WG_IPROOT$WG_NEXTIP") !\n"

        # Création et affichage qrcode
        qrencode -o $WG_DIRQRCODE/$2.jpg < $WG_DIRCONF/$2.conf
        qrencode -t ansiutf8 < $WG_DIRCONF/$2.conf
        echo ""
      else
        echo "Plus d'adresse IP disponible !"
      fi
    else
      echo "Ce client existe déjà !"
    fi
    ;;

  ##### Suppression d'un client
  delcli)
    if [ $# -ne 2 ]
    then
      echo "Nom client manquant ou incorrect (le nom du client ne doit pas contenir d'espace) !"
      exit
    fi

    if [ -e $WG_DIRCONF"/"$2.conf ]
    then
      while [ -z $CONFIRM ] || ( [ $CONFIRM != "O" ] && [ $CONFIRM != "N" ] )
      do
        read -rp "Voulez-vous vraiment supprimer le client "$2" (O/N) ? " -e CONFIRM
        CONFIRM=`echo $CONFIRM | tr '[a-z]' '[A-Z]'`
      done
      if [ $CONFIRM == "O" ]
      then
        WG_FIRSTLINETODEL=`grep -n "# Client "$2"$" wg0.conf | sed -rn "s/([[:digit:]]*):.*/\\1/p"`
        let WG_LASTLINETODEL=$WG_FIRSTLINETODEL+5
        sed -i """"$WG_FIRSTLINETODEL","$WG_LASTLINETODEL"d" wg0.conf
        rm $WG_DIRKEYS/$2_private_key
        rm $WG_DIRKEYS/$2_public_key
        rm $WG_DIRCONF/$2.conf
        rm $WG_DIRQRCODE/$2.jpg

        wg-quick down $WG_FILECONF >/dev/null 2>&1
        wg-quick up $WG_FILECONF >/dev/null 2>&1

        echo -e "\nSuppression client "$2" réussie !\n"
      else
        echo -e "\nSuppression annulée !\n"
      fi
    else
      echo "Ce client n'existe pas !"
    fi
    ;;

  ##### Liste des clients
  listcli)
    if [ $# -eq 1 ]
    then
      grep -E '# Client'\|'Allowed' $WG_FILECONF | sed -rn "N;s/# Client (.*)\n.* = ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*/\\1,\\2/p"
    elif [ $# -eq 2 ]
    then
      if [ $2 == "byip" ]
      then
        grep -E '# Client'\|'Allowed' $WG_FILECONF | sed -rn "N;s/# Client (.*)\n.* = ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}).*/\\1,\\2/p" | sort -t. -k 4 -n
      else
        echo "Paramètre erroné !"
      fi
    else
      echo "Nombre de paramètres incorrect !"
    fi
    ;;

  ##### Affichage de la liste des clés
  listkeys)
    if [ $# -eq 1 ]
    then
      for file in $WG_DIRKEYS/*
      do
         echo -e "$(basename "$file"),`cat $file`"
      done
    else
      echo "Nombre de paramètres incorrect !"
    fi
    ;;

  ##### Affichage d'un fichier de configuration client
  showcli)
    if [ $# -eq 2 ]
    then
      if [ -e $WG_DIRCONF"/"$2.conf ]
      then
        cat $WG_DIRCONF"/"$2.conf
      else
        echo "Ce client n'existe pas !"
      fi
    else
      echo "Nom client manquant ou incorrect (le nom du client ne doit pas contenir d'espace) !"
    fi
    ;;

  ##### Affichage d'un qrcode client
  showqrcode)
    if [ $# -eq 2 ]
    then
      if [ -e $WG_DIRCONF"/"$2.conf ]
      then
        echo ""
        qrencode -t ansiutf8 < $WG_DIRCONF"/"$2.conf
        echo ""
      else
        echo "Ce client n'existe pas !"
      fi
    else
      echo "Nom client manquant ou incorrect (le nom du client ne doit pas contenir d'espace) !"
    fi
    ;;

  ##### Envoi des fichiers de configuration par mail
  sendconf)
    WG_MUTTINST=`which mutt`
    if [ -z $WG_MUTTINST ]
    then
      echo -e "\nImpossible d'envoyer des mails : le package mutt n'est pas installé !\n"
      exit
    fi

    if [ $# -eq 3 ]
    then
      if [ -e $WG_DIRCONF"/"$2.conf ]
      then
        if [[ $3 =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]+$ ]]
        then
          echo -ne "Mél envoyé par wgconf\n\nEn pièces jointes les fichiers de configuration du client "$2" (.conf et qrcode)" | mutt -s "Fichiers client wireguard "$2 -a $WG_DIRCONF/$2.conf -a $WG_DIRQRCODE/$2.jpg -- $3
          echo -e "\nFichiers de configuration envoyés !\n"
        else
          echo "Adresse email incorrecte !"
        fi
      else
        echo "Ce client n'existe pas !"
      fi
    else
      echo "Nombre de paramètres incorrect !"
    fi
    ;;

  ##### Arrêt VPN
  stop)
    if [ $# -eq 1 ]
    then
      wg-quick down $WG_FILECONF
      wg show
    else
      echo "Nombre de paramètres incorrect !"
    fi
    ;;

  ##### Redémarrage serveur
  restart)
    if [ $# -eq 1 ]
    then
      wg-quick down $WG_FILECONF
      wg-quick up $WG_FILECONF
      wg show
    else
      echo "Nombre de paramètres incorrect !"
    fi
    ;;

  ##### Suppression globale des données
  raz)
    if [ $# -eq 1 ]
    then
      while [ -z $CONFIRM ] || ( [ $CONFIRM != "O" ] && [ $CONFIRM != "N" ] )
      do
        read -rp "Voulez-vous vraiment supprimer tous les clients et la configuration (O/N) ? " -e CONFIRM
        CONFIRM=`echo $CONFIRM | tr '[a-z]' '[A-Z]'`
      done
      if [ $CONFIRM == "O" ]
      then
        wg-quick down $WG_FILECONF > /dev/null 2>&1

        rm -R $WG_DIRCONF > /dev/null 2>&1
        rm -R $WG_DIRKEYS > /dev/null 2>&1
        rm -R $WG_DIRQRCODE > /dev/null 2>&1
        rm $WG_FILECONF > /dev/null 2>&1
        rm $WG_PARAMS > /dev/null 2>&1

        echo "Tous les clients et la configuration sont supprimés !"
      else
        echo -e "\nSuppression annulée !\n"
      fi
    else
      echo "Nombre de paramètres incorrect !"
    fi
    ;;

  ##### Mise à jour dernière version du script
  autoupdate)
    WG_WGETINST=`which wget`
    if [ -z $WG_WGETINST ]
    then
      echo -e "\nImpossible de faire la mise à jour : le package wget n'est pas installé !\n"
      exit
    fi

    if [ $# -eq 1 ]
    then
      wget -O $WG_DIR/newwgconfmikmer62 https://raw.githubusercontent.com/mikmer62/wgconf/master/wgconf >/dev/null 2>&1
      WG_NEWMAJORRELEASE=`grep -e '##### Version ' $WG_DIR/wgconf | sed -rn "s/##### Version ([[:digit:]])\.([[:digit:]]).*/\\1/p"`
      WG_NEWMINORRELEASE=`grep -e '##### Version ' $WG_DIR/wgconf | sed -rn "s/##### Version ([[:digit:]])\.([[:digit:]]).*/\\2/p"`

      let WG_NEWMAJORRELEASE=2
      let WG_NEWMINORRELEASE=0
      if [ $WG_NEWMAJORRELEASE -gt $WG_CURMAJORRELEASE ] || [ $WG_NEWMINORRELEASE -gt $WG_CURMINORRELEASE ]
      then
        chmod +x $WG_DIR/newwgconfmikmer62
        mv $WG_DIR/newwgconfmikmer62 $WG_DIR/wgconf
        echo "Mise à jour en version "$WG_NEWMAJORRELEASE"."$WG_NEWMINORRELEASE "effectuée !"
      else
        echo "Vous disposez déjà de la dernière version de wgconf !"
      rm $WG_DIR/newwgconfmikmer62
      fi
    else
      echo "Nombre de paramètres incorrect !"
    fi
    ;;

  ?)
    echo "wgconf version "$WG_CURMAJORRELEASE"."$WG_CURMINORRELEASE
    echo "USAGE"
    echo "    wgconf <option> [<byip>] [nom_du_client] [email]"
    echo "    Le nom du client  ne doit pas contenir d'espace"
    echo "OPTIONS"
    echo "    init                          : Initialise les paramètres du serveur VPN"
    echo "    addcli nom_du_client          : Ajoute le client nom_du_client"
    echo "    delcli nom_du_client          : Supprime le client nom_du_client"
    echo "    listcli                       : Affiche la liste des clients"
    echo "    listcli byip                  : Affiche la liste des clients triée par IP VPN"
    echo "    listkeys                      : Affiche la liste des clé publiques et privées"
    echo "    showcli nom_du_client         : Affiche le fichier de configuration du client"
    echo "    showqrcode nom_du_client      : Affiche le qrcode du client"
    echo "    sendconf nom_du_client email  : Envoie les fichier de configuration à l'adresse email"
    echo "    stop                          : Arrête le serveur VPN Wireguard"
    echo "    restart                       : Redémarre le serveur VPN Wireguard"
    echo "    raz                           : Supprime tous les clients et la configuration"
    echo "    autoupdate                    : Mise à jour automatique du script"
    echo ""
    ;;

  *)
    echo "Option(s) incorrecte(s). Tapez wgconf ? pour une aide sur les options"
    ;;
esac
